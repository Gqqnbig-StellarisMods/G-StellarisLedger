//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/gqqnbig/IdeaProjects/untitled/src\Paradox.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ParadoxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, STRING=4, ID=5, NUMBER=6, WS=7;
	public const int
		RULE_paradox = 0, RULE_kvPair = 1, RULE_scope = 2, RULE_atom = 3;
	public static readonly string[] ruleNames = {
		"paradox", "kvPair", "scope", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "STRING", "ID", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Paradox.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ParadoxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParadoxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParadoxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ParadoxContext : ParserRuleContext {
		public KvPairContext[] kvPair() {
			return GetRuleContexts<KvPairContext>();
		}
		public KvPairContext kvPair(int i) {
			return GetRuleContext<KvPairContext>(i);
		}
		public ParadoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paradox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterParadox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitParadox(this);
		}
	}

	[RuleVersion(0)]
	public ParadoxContext paradox() {
		ParadoxContext _localctx = new ParadoxContext(Context, State);
		EnterRule(_localctx, 0, RULE_paradox);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8; kvPair();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << STRING) | (1L << ID) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvPairContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public KvPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvPair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterKvPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitKvPair(this);
		}
	}

	[RuleVersion(0)]
	public KvPairContext kvPair() {
		KvPairContext _localctx = new KvPairContext(Context, State);
		EnterRule(_localctx, 2, RULE_kvPair);
		try {
			State = 22;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; atom();
				State = 14; Match(T__0);
				State = 15; atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 17; atom();
				State = 18; Match(T__0);
				State = 19; scope();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 21; scope();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		public ParadoxContext paradox() {
			return GetRuleContext<ParadoxContext>(0);
		}
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 4, RULE_scope);
		int _la;
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(T__1);
				State = 25; paradox();
				State = 26; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; Match(T__1);
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 29; atom();
					}
					}
					State = 32;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << ID) | (1L << NUMBER))) != 0) );
				State = 34; Match(T__2);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; Match(T__1);
				State = 37; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ParadoxParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(ParadoxParser.NUMBER, 0); }
		public ITerminalNode ID() { return GetToken(ParadoxParser.ID, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IParadoxListener typedListener = listener as IParadoxListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 6, RULE_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << ID) | (1L << NUMBER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '-', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', '\x2', 
		'\x6', '\x2', '\f', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\r', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x19', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x6', '\x4', '!', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', '\"', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', ')', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x2', 
		'\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x3', '\x3', '\x2', '\x6', 
		'\b', '\x2', '.', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '(', '\x3', '\x2', '\x2', '\x2', '\b', 
		'*', '\x3', '\x2', '\x2', '\x2', '\n', '\f', '\x5', '\x4', '\x3', '\x2', 
		'\v', '\n', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\v', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x3', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', 
		'\x5', '\b', '\x5', '\x2', '\x10', '\x11', '\a', '\x3', '\x2', '\x2', 
		'\x11', '\x12', '\x5', '\b', '\x5', '\x2', '\x12', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\x5', '\b', '\x5', '\x2', '\x14', '\x15', 
		'\a', '\x3', '\x2', '\x2', '\x15', '\x16', '\x5', '\x6', '\x4', '\x2', 
		'\x16', '\x19', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\x6', 
		'\x4', '\x2', '\x18', '\xF', '\x3', '\x2', '\x2', '\x2', '\x18', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x4', 
		'\x2', '\x2', '\x1B', '\x1C', '\x5', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\a', '\x5', '\x2', '\x2', '\x1D', ')', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		' ', '\a', '\x4', '\x2', '\x2', '\x1F', '!', '\x5', '\b', '\x5', '\x2', 
		' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\x5', 
		'\x2', '\x2', '%', ')', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', '\x4', 
		'\x2', '\x2', '\'', ')', '\a', '\x5', '\x2', '\x2', '(', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x1E', '\x3', '\x2', '\x2', '\x2', '(', '&', 
		'\x3', '\x2', '\x2', '\x2', ')', '\a', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\t', '\x2', '\x2', '\x2', '+', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\r', '\x18', '\"', '(',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
