//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Source Code/CSharp/ÍøÕ¾/StellarisInGameLedgerInCSharp/ParadoxParser\ParadoxYaml.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ParadoxYamlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LANGUAGE_INDICATOR=1, Key=2, Text=3, COMMENT=4, NEWLINE=5, WS=6;
	public const int
		RULE_paradoxYaml = 0, RULE_localization = 1;
	public static readonly string[] ruleNames = {
		"paradoxYaml", "localization"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "LANGUAGE_INDICATOR", "Key", "Text", "COMMENT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParadoxYaml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ParadoxYamlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParadoxYamlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParadoxYamlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ParadoxYamlContext : ParserRuleContext {
		public ITerminalNode LANGUAGE_INDICATOR() { return GetToken(ParadoxYamlParser.LANGUAGE_INDICATOR, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(ParadoxYamlParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(ParadoxYamlParser.NEWLINE, i);
		}
		public ITerminalNode Eof() { return GetToken(ParadoxYamlParser.Eof, 0); }
		public LocalizationContext[] localization() {
			return GetRuleContexts<LocalizationContext>();
		}
		public LocalizationContext localization(int i) {
			return GetRuleContext<LocalizationContext>(i);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(ParadoxYamlParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(ParadoxYamlParser.COMMENT, i);
		}
		public ParadoxYamlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paradoxYaml; } }
	}

	[RuleVersion(0)]
	public ParadoxYamlContext paradoxYaml() {
		ParadoxYamlContext _localctx = new ParadoxYamlContext(Context, State);
		EnterRule(_localctx, 0, RULE_paradoxYaml);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; Match(LANGUAGE_INDICATOR);
			State = 5; Match(NEWLINE);
			State = 15;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Key) {
						{
						State = 6; localization();
						}
					}

					State = 10;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMENT) {
						{
						State = 9; Match(COMMENT);
						}
					}

					State = 12; Match(NEWLINE);
					}
					} 
				}
				State = 17;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Key) {
					{
					State = 18; localization();
					}
				}

				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 21; Match(COMMENT);
					}
				}

				State = 24; Match(Eof);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalizationContext : ParserRuleContext {
		public ITerminalNode Key() { return GetToken(ParadoxYamlParser.Key, 0); }
		public ITerminalNode Text() { return GetToken(ParadoxYamlParser.Text, 0); }
		public LocalizationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localization; } }
	}

	[RuleVersion(0)]
	public LocalizationContext localization() {
		LocalizationContext _localctx = new LocalizationContext(Context, State);
		EnterRule(_localctx, 2, RULE_localization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(Key);
			State = 28; Match(Text);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '!', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\n', '\n', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\r', '\n', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x10', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x16', '\n', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x19', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1C', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x2', 
		'\x2', '\x4', '\x2', '\x4', '\x2', '\x2', '\x2', '$', '\x2', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\a', '\a', '\x3', '\x2', '\x2', '\a', '\x11', '\a', '\a', '\x2', '\x2', 
		'\b', '\n', '\x5', '\x4', '\x3', '\x2', '\t', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\n', '\x3', '\x2', '\x2', '\x2', '\n', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\r', '\a', '\x6', '\x2', '\x2', '\f', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x10', '\a', '\a', '\x2', '\x2', '\xF', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x10', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', 
		'\x2', '\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x18', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x19', '\a', '\x6', '\x2', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1C', '\a', '\x2', '\x2', '\x3', '\x1B', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', 
		'\x4', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x5', '\x2', '\x2', '\x1F', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\f', '\x11', '\x15', '\x18', 
		'\x1B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
