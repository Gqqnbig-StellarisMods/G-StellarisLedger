@using StellarisLedger
@*支持页面基础部分的本地化，字符串由Resources\View文件夹里的文件提供*@
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Lo
@*支持群星游戏字符串的本地化，字符串由游戏的YAML文件提供*@
@inject YamlStringLocalizer YLo

@{ ViewData["Title"] = "Statistics"; }

@section head
	{
	<style type="text/css">
		thead th img {
			max-height: 32px;
			vertical-align: middle;
		}

		#visibleColumnsForTable label {
			float: left; /* 不用display:block因为这样会使label占据大量空间，光标点击空白区会意外勾选多选框。 */
			clear: left;
		}

		label {
			padding-right: 3em;
		}
	</style>
}

@section Scripts
	{
	<!--Load the AJAX API-->
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.0/lodash.min.js"></script>
	<script type="text/javascript" src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
	<script src="content/palette.js"></script>


	<script>
		"use strict";

		let googleTable;
		let tableData;
		let columns;


		// Load the Visualization API and the corechart package.
		google.charts.load('46', { 'packages': ['corechart', 'table'] });


		function addCalculatedProperties(country)
		{
			Object.defineProperty(country, 'totalResearchIncomeWithPenalty',
				{
					get: function ()
					{
						return this.physicsResearchIncomeWithPenalty + this.societyResearchIncomeWithPenalty + this.engineeringResearchIncomeWithPenalty;
					}
				});
		}

		function getDefaultColumnVisibility(columnName)
		{
			if (["physicsResearchIncome", "societyResearchIncome", "engineeringResearchIncome"].indexOf(columnName) == -1)
				return true;
			else
				return false;
		}

		/**
		 *
		 * @@param {Array} countries
		 * @@param {HTMLElement} placeHolder
		 */
		function drawTableFromJson(countries)
		{
			tableData = new google.visualization.DataTable();
			let propertyNames = Object.getOwnPropertyNames(countries[0]);


			//propertyNames = propertyNames.filter(p => ["physicsResearchIncome", "societyResearchIncome", "engineeringResearchIncome"].indexOf(p) === -1);

			propertyNames.forEach(p =>
			{
				let c = columns[p];
				let label = _.startCase(p);
				let type = typeof (countries[0][p]);
				if (c)
				{
					if (c.compactHeader)
						label = c.compactHeader;
					else if (c.header)
						label = c.header;

					if (c.type)
						type = c.type;
				}
				return tableData.addColumn({ type: type, label: label });
			});

			//创建多选框控制列的显隐
			propertyNames.forEach((p, i) =>
			{
				const checkBox = $("<input type='checkbox'>");
				checkBox.attr("name", i);
				checkBox.change(function ()
				{
					localStorage.setItem("table-" + $(this).attr("name"), $(this).prop("checked"));
					updateTableView();
				});

				let isChecked = localStorage.getItem("table-" + i);
				if (isChecked == undefined)
					isChecked = getDefaultColumnVisibility(p);
				else
					isChecked = isChecked == "true";
				checkBox.prop("checked", isChecked);

				let c = columns[p] || {};

				const label = $(`<label>${c.header || _.startCase(p).replace(/\bWith\b/, "with")}</label>`);
				label.prepend(checkBox);
				$("#visibleColumnsForTable").append(label);
			});

			let maxLabelWidth = 0;
			$("#visibleColumnsForTable label").each(function ()
			{
				let w = $(this).outerWidth();
				if (w > maxLabelWidth)
					maxLabelWidth = w;
			});
			$("#visibleColumnsForTable").css("column-width", `${maxLabelWidth}px`);


			//把json对象转换为数组
			const rows = countries.map(country => propertyNames.map(p =>
			{
				let c = columns[p];
				if (c && c.getValue)
					return c.getValue(country[p]);
				else
					return country[p];
			}));


			tableData.addRows(rows);

			propertyNames.forEach((p, i) =>
			{
				var c = columns[p];
				if (c && c.format)
				{
					c.format.format(tableData, i);
				}
			});


			updateTableView();
		}

		function updateTableView()
		{
			const view = new google.visualization.DataView(tableData);
			var columns = view.getViewColumns();
			columns = columns.filter(c => $(`#visibleColumnsForTable input[name="${c}"]`).prop("checked"));
			view.setColumns(columns);

			// Instantiate and draw our chart, passing in some options.
			googleTable = new google.visualization.Table(document.getElementById('table_div'));

			googleTable.draw(view, { allowHtml: true, width: "100%" });
		}
	</script>

	<script>
		let historyData;
		let tags = [];

		google.charts.setOnLoadCallback(() =>
		{
			let incomeFormat = new google.visualization.NumberFormat({ fractionDigits: 2, groupingSymbol: "", negativeColor: "red" });
			let totalFormat = new google.visualization.NumberFormat({ fractionDigits: 0, groupingSymbol: "" });
			columns = {
				name: { header: "@Html.RawResource(YLo["NAME"])" },
				militaryPower: { header: "@Html.RawResource(YLo["MILITARY_POWER_HEADER"])", format: totalFormat },
				technologyCount: { header: "@Html.RawResource(Lo["Technologies"])" },
				colonies: { compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/6/6e/Planet_gaia.png" title="Colonies">', type: "number", getValue: d => d.length },
				traditionCount: { header: "@Html.RawResource(YLo["topbar_button_traditions_name"])" },
				energy: { header: "@Html.RawResource(YLo["energy"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/5/58/Energy_Credits.png" title="@YLo["energy"]">', format: totalFormat },
				minerals: { header: "@Html.RawResource(YLo["minerals"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/1/10/Minerals.png" title="@YLo["minerals"]">', format: totalFormat },
				food: { header: "@Html.RawResource(YLo["food"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/c/c6/Food.png" title="@YLo["food"]">', format: totalFormat },
				influence: { header: "@Html.RawResource(YLo["influence"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/9/91/Influence.png" title="@YLo["influence"]">', format: new google.visualization.NumberFormat({ fractionDigits: 2, groupingSymbol: "" }) },
				energyIncome: { header: "@Html.Raw(Lo["{0} Income"], YLo["energy"])", format: incomeFormat },
				mineralsIncome: { header: "@Html.Raw(Lo["{0} Income"], YLo["minerals"])", format: incomeFormat },
				foodIncome: { header: "@Html.Raw(Lo["{0} Income"], YLo["food"])", type: "number", format: incomeFormat }, //机械帝国没有食物，食物总量是0，增长是null。
				influenceIncome: { header: "@Html.Raw(Lo["{0} Income"], YLo["influence"])", format: incomeFormat },
				unity: { header: "@Html.Raw(Lo["{0} Income"], YLo["unity"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/3/3d/Unity.png" title="@YLo["unity"]">' },
				unityIncomeWithPenalty: { header: "@Html.Raw(Lo["{0} Income with Penalty"], YLo["unity"])", format: incomeFormat },
				physicsResearchIncomeWithPenalty: { header: "@Html.Raw(Lo["{0} Income with Penalty"], YLo["PHYSICS_RESEARCH"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/b/b3/Research_speed_%28Physics%29.png" title="@Lo["{0} Income with Penalty", YLo["PHYSICS_RESEARCH"]]">', format: incomeFormat },
				societyResearchIncomeWithPenalty: { header: "@Html.Raw(Lo["{0} Income with Penalty"], YLo["SOCIETY_RESEARCH"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/4/4f/Research_speed_%28Society%29.png" title="@Lo["{0} Income with Penalty", YLo["SOCIETY_RESEARCH"]]">', format: incomeFormat },
				engineeringResearchIncomeWithPenalty: { header: "@Html.Raw(Lo["{0} Income with Penalty"], YLo["ENGINEERING_RESEARCH"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/e/ec/Research_speed_%28Engineering%29.png" title="@Lo["{0} Income with Penalty", YLo["ENGINEERING_RESEARCH"]]">', format: incomeFormat },
				population: { header: "@Html.RawResource(YLo["POPULATION"])", compactHeader: '<img src="https://stellaris.paradoxwikis.com/images/7/71/Pop.png" title="@YLo["POPULATION"]">' },
				totalResearchIncomeWithPenalty: { compactHeader: "<span title='Total Research Income with Penalty'><img src='https://stellaris.paradoxwikis.com/images/b/b3/Research_speed_%28Physics%29.png'> + <img src='https://stellaris.paradoxwikis.com/images/4/4f/Research_speed_%28Society%29.png'> + <img src='https://stellaris.paradoxwikis.com/images/e/ec/Research_speed_%28Engineering%29.png'></span>", format: incomeFormat }
			};


			fetch("/api/RecentSaves?limit=25").then(response => response.json()).then(recentSaves =>
			{
				if (recentSaves.length === 0)
				{
					$("body").html("No savegames");
					return;
				}

				//recentSaves.splice(0, 1);
				const promises = recentSaves.map(path => fetch(`/api/${path.replace("\\", "/")}/Countries`).then(r =>
				{
					const i = path.indexOf("\\") + 1;
					//定义一个新的承诺，当r.json()承诺实现时，新的承诺也实现。
					return new Promise(function(resolve, reject)
					{
						r.json().then(json =>
						{
							json.forEach(addCalculatedProperties);

							resolve({
								date: path.substr(i, path.length - i - ".sav".length),
								content: json
							});
						}).catch(function(ex)
						{
							$("body").text("Error");
							throw ex;
						});
					});
				}));

				promises[0].then(data =>
				{
					drawTableFromJson(data.content);
				});

				Promise.all(promises).then(history =>
				{
					history = history.sort((x, y) => Date.parse(x.date) - Date.parse(y.date));
					historyData = history;


					for (let snapshot of history)
					{
						for (let country of snapshot.content)
							tags.push(country.tag);
					}
					tags = [...new Set(tags)];
					tags = tags.map(tag =>
					{
						for (let i = history.length - 1; i >= 0; i--)
						{
							for (let country of history[i].content)
							{
								if (country.tag === tag)
									return { tag: tag, name: country.name };
							}
						}
						throw new Error();
					});

					const filterPanel = $("#countryFilterPanel");
					for (let tag of tags)
					{
						const label = $(`<label>${tag.name}</label>`);
						const checkBox = $(`<input type='checkbox' name='${tag.name}'>`);

						let v = localStorage.getItem("history-" + tag.name);
						if (v == undefined)
							v = true;
						else
							v = v == "true";
						checkBox.prop("checked", v);

						checkBox.change(function()
						{
							localStorage.setItem("history-" + $(this).attr("name"), $(this).prop("checked"));
							updateHistoryCharts();
						});

						label.prepend(checkBox);
						filterPanel.append(label);
					}

					updateHistoryCharts();

					fetch("/api/gc/run");
				});
			}).catch(function(error) {$("body").text("Error in loading recent save games. Check console output for details.")});
		});


		function updateHistoryCharts()
		{
			let propertyNames = Object.getOwnPropertyNames(historyData[0].content[0]);

			let dataPropertyNames = propertyNames.filter(p => ["tag", "name"].indexOf(p) === -1);


			let partition = _.partition(dataPropertyNames, p => _.includes(["physicsResearchIncomeWithPenalty", "societyResearchIncomeWithPenalty", "engineeringResearchIncomeWithPenalty"], p));
			let researchIncomeWithPenaltyProperties = partition[0];
			let regularProperties = partition[1];

			partition = _.partition(regularProperties, p => _.includes(["physicsResearchIncome", "societyResearchIncome", "engineeringResearchIncome"], p));
			let researchIncomeProperties = partition[0];
			regularProperties = partition[1];

			updateSinglePropertyCharts(regularProperties);

			updateCombinedPropertyChart("ResearchIncome", "@Html.RawResource(Lo["Research Income"])", researchIncomeProperties);
			updateCombinedPropertyChart("ResearchIncomeWithPenalty", "@Html.RawResource(Lo["Research Income with Penalty"])", researchIncomeWithPenaltyProperties);
		}

		/**
		 * 本方法为每一个属性绘制一张折线图
		 * @@param properties {string[]}
		 */
		function updateSinglePropertyCharts(properties)
		{
			for (let property of properties)
			{
				const lineChartData = new google.visualization.DataTable();
				lineChartData.addColumn({ type: "date", label: "date" });
				for (let tag of tags)
				{
					let c = columns[property];
					let type = "number";
					if (c && c.type)
						type = c.type;
					lineChartData.addColumn({ type: type, label: tag.name });
				}

				const rows = historyData.map(item =>
				{
					const row = [new Date(Date.parse(item.date))];
					for (let tag of tags)
					{
						const country = item.content.find(c => c.tag === tag.tag);
						if (country)
						{
							let c = columns[property];
							if (c && c.getValue)
								row.push(c.getValue(country[property]));
							else
								row.push(country[property]);
						} else
							row.push(undefined);
					}
					return row;
				});

				lineChartData.addRows(rows);


				var c = columns[property];
				if (c && c.format)
				{
					for (var i = 0; i < tags.length; i++)
						c.format.format(lineChartData, 1 + i);
				}

				var options = {
					title: (c || {}).header || _.startCase(property).replace(/\bWith\b/, "with"),
					legend: { position: 'right' },
					width: document.getElementsByTagName("body")[0].clientWidth - 50,
					height: Math.max(400, 100 * Math.ceil(tags.length / 2.0)),
					pointSize: 5,
					hAxis: { format: "yyyy.MM.dd" }
				};

				let chartDiv = $(`#${property}Chart`);
				if (chartDiv.length === 0)
				{
					chartDiv = $(`<div id="${property}Chart"></div>`);
					$("#historyPanel").append(chartDiv);
				}

				const view = new google.visualization.DataView(lineChartData);
				var viewColumns = view.getViewColumns();
				viewColumns = viewColumns.filter(columnIndex => columnIndex === 0 || $(`#countryFilterPanel input[name="${view.getColumnLabel(columnIndex)}"]`).prop("checked"));
				view.setColumns(viewColumns);


				const googleLineChart = new google.visualization.LineChart(chartDiv[0]);

				googleLineChart.draw(view, options);
			}
		}

		/**
		 * 本方法把所有属性绘制在同一张折线图里
		 * @@param properties {string[]}
		 */
		function updateCombinedPropertyChart(id, title, properties)
		{
			const lineChartData = new google.visualization.DataTable();
			lineChartData.addColumn({ type: "date", label: "date" });
			for (let tag of tags)
			{
				for (let i = 0; i < properties.length; i++)
					lineChartData.addColumn({ type: "number", label: tag.name + (i === 0 ? "" : "-" + properties[i]) });
			}

			const rows = historyData.map(item =>
			{
				const row = [new Date(Date.parse(item.date))];
				for (let tag of tags)
				{
					for (let p of properties)
					{
						const country = item.content.find(c => c.tag === tag.tag);
						if (country)
							row.push(country[p]);
						else
							row.push(undefined);
					}
				}
				return row;
			});

			lineChartData.addRows(rows);

			let index = 0;
			for (let tag of tags)
			{
				for (let p of properties)
				{
					var c = columns[p];
					if (c && c.format)
					{
						c.format.format(lineChartData, 1 + index);
					}
					index++;
				}
			}

			let colors = palette('mpn65', tags.length);
			let pointShapePalette = ["circle", "triangle", "square", "diamond"];
			let pointShapePaletteLocalized = ["●", "▲", "■", "♦"];

			let series = [];
			for (let i = 0; i < tags.length; i++)
			{
				let color = colors[i];
				for (let j = 0; j < properties.length; j++)
				{
					series.push({
						color: color,
						pointShape: pointShapePalette[j],
						visibleInLegend: j === 0
					});
				}
			}

			let subtitle="";
			for (let j = 0; j < properties.length; j++)
			{
				let header = (columns[properties[j]] || {}).header;
				let a = header || _.startCase(properties[j]).replace(/\bWith\b/, "with");
				let b = pointShapePaletteLocalized[j];
				subtitle += @Html.RawResource(Lo["\"mark of \"+ a+\" is \"+b"])+ (j<properties.length-1?"@Html.RawResource(Lo["subTitleSeparator"])":"");
			}

			var options = {
				title: title+ (subtitle?"@Html.RawResource(Lo["subTitleIntroducer"])"+subtitle:""),
				series: series,
				legend: { position: 'right' },
				width: document.getElementsByTagName("body")[0].clientWidth - 50,
				height: Math.max(400, 100 * Math.ceil(tags.length / 2.0)),
				pointSize: 10,
				hAxis: { format: "yyyy.MM.dd" }
			};

			let chartDiv = $(`#${id}Chart`);
			if (chartDiv.length === 0)
			{
				chartDiv = $(`<div id="${id}Chart"></div>`);
				$("#historyPanel").append(chartDiv);
			}

			const view = new google.visualization.DataView(lineChartData);
			var viewColumns = view.getViewColumns();
			viewColumns = viewColumns.filter(columnIndex =>
			{
				if (columnIndex === 0)
					return true;

				let label = view.getColumnLabel(columnIndex);
				return $("#countryFilterPanel input[name]").is(function()
				{
					return $(this).prop("checked") && _.startsWith(label, $(this).attr("name"));
				});
			});
			view.setColumns(viewColumns);


			const googleLineChart = new google.visualization.LineChart(chartDiv[0]);

			googleLineChart.draw(view, options);
		}


	</script>
}

<div id="table_div"></div>


<fieldset>
	<legend>@Lo["Show following columns"]</legend>
	<div id="visibleColumnsForTable" class="loading-prompt" data-time="10"></div>
</fieldset>

<div id="historyPanel">
	<fieldset>
		<legend>@Lo["Show following countries"]</legend>
		<div id="countryFilterPanel" class="loading-prompt" data-time="30"></div>
	</fieldset>
</div>
