@*支持页面基础部分的本地化，字符串由Resources\View文件夹里的文件提供*@
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Lo
@*支持群星游戏字符串的本地化，字符串由游戏的YAML文件提供*@
@inject YamlStringLocalizer YLo

@model StellarisLedger.Models.PlanetsIndexViewModel

@{
	ViewData["Title"] = YLo["PLANETS"];
}

@section head
{
	<style type="text/css">
		.nonexistent {
			background-color: lightgray;
			cursor: not-allowed;
		}

		.tiles {
			margin-bottom: 2em;
			table-layout: fixed;
		}

		table.tiles caption {
			caption-side: top;
		}

		.tiles td {
			text-align: center;
			height: 2em;
			width: 20%;
		}

		.tiles .resource {
			margin: 0.1em 0.2em;
		}

		.tileId {
			color: #fd7e14;
			font-weight: bold;
		}
		.tileId::before {
			content: "地块";
		}

		.bg-highlight {
			border: 3px dotted orange !important;
			padding: 0.1em;
		}

		.bg-active {
			border: 3px dotted lightblue !important;
			padding: 0.1em;
		}

		.tileId.bg-highlight {
			padding: 0.1em;
		}

		.tileId.bg-active {
			padding: 0.1em;
		}

		.allowNeuroElectricAmplifierLabel[disabled] {
			color: gray;
		}
		.allowNeuroElectricAmplifierLabel[disabled]::after {
			content: "@Lo["({0} requires {1})", YLo["building_neuro_electric_amplifier"], YLo["building_capital_2"]]";
			margin-left: 1em;
		}
	</style>
}
@if (Model.IsMachineEmpire)
{
	<p class="bg-info text-light">
		@Lo["Options have been optimized for {0} that you are playing.", YLo["machine_intelligence"]]
	</p>
}
<div id="planets">
	<div class="d-none">
		<fieldset class="planet" id="planetSectionTemplate">
			<legend></legend>

			<div class="container-fluid">
				<div class="row">
					<div class="col-md">
						<table class='table-bordered tiles'></table>
					</div>
					<div class="best-colony col-md">
						<label>@Lo["Adjacency Bonus"]</label>
						<select class="adjacency-bonus-input">
							<option value="1">1 - @YLo["building_capital_1"]</option>
							<option value="2">2 - @YLo["building_capital_2"]</option>
							<option value="3">3 - @YLo["building_capital_3"]</option>
						</select>

						<label class="form-check" style="padding-left: 0"><input class="not-on-special-input" type="checkbox" />@Lo["Do not build on special resources"]</label>
						@if (Model.IsMachineEmpire)
						{
							<label class="form-check allowNeuroElectricAmplifierLabel" style="padding-left: 0"><input class="allowNeuroElectricAmplifierInput" type="checkbox"/>@Lo["Can build {0}", YLo["building_neuro_electric_amplifier"]]</label>
						}


						<button>@Lo["Find best tile for colony capital"]</button>

						<div class="result-display"></div>
					</div>
				</div>
			</div>
		</fieldset>
	</div>
	<fieldset id="queryPlanet">
		<legend>@Lo["Query a planet"]</legend>
		<div>
			<label>@Lo["Planet ID"] <input id="planetIdInput" type="number" /></label>
			<button id="queryPlanetButton" type="submit">Submit</button>
		</div>
	</fieldset>
</div>


@section Scripts
{
	<script type="text/javascript" src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
	<script src="~/content/planets.js"></script>
	<script type="text/javascript">
		'use strict';

		document.planetsData = {}; //不用关键字var可成为全局变量，但这在严格模式不允许。

		document.saveGamePath = "@Model.LatestSaveGamesPath.Replace('\\', '/')";
		if (document.saveGamePath)
		{
			fetch(`/api/${document.saveGamePath}/Countries/me/Planets`).then(response => response.json()).then(planetsData =>
			{
				document.planetsData = planetsData;


				let $template = $("#planetSectionTemplate");

				planetsData.forEach((planet, index) =>
				{
					let $section = $template.clone();
					$section.removeAttr("id");
					buildPlanetSection($section, planet, index);
					$("#planets").append($section);
				});
			});
		} else
			$("body").text("No save games!");


		function buildPlanetSection($section, planet, index)
		{
			$section.attr("index", index);

			$section.find("legend").text(planet.Name);

			buildTilesTable($section.find(".tiles"), planet.Tiles);

			let $form = $section.find(".best-colony");
			let $button = $form.find("button");
			$button.click(bestColonyButton_Click);
			if (@Model.IsMachineEmpire.ToString().ToLower())
			{
				$form.find("select").change(function()
				{
					let v = parseInt($(this).val());
					let $label = $(this).closest(".best-colony").find(".allowNeuroElectricAmplifierInput").closest("label");
					if (v < 2)
					{
						$label[0].setAttribute("disabled", "");
						$label.find("input")[0].setAttribute("disabled", "");
					} else
					{
						$label[0].removeAttribute("disabled");
						$label.find("input")[0].removeAttribute("disabled");
					}
				});
				$form.find("select").change();
			}

			let s = localStorage.getItem("planet-capital-options");
			if (s)
			{
				try
				{
					let options = JSON.parse(s);
					$form.find(".adjacency-bonus-input").val(options.adjacencyBonus);
					$form.find(".not-on-special-input")[0].checked = options.notOnSpecial;
					@if (Model.IsMachineEmpire)
					{
						@:$form.find(".allowNeuroElectricAmplifierInput")[0].checked = options.allowNeuroElectricAmplifier;
					}
					$form.find("select").change();
				} catch (e)
				{
					localStorage.removeItem("planet-capital-options");
				}
			}
		}

		function bestColonyButton_Click()
		{
			let $section = $(this).closest(".planet");
			let $form = $(this).closest(".best-colony");
			let $resultDisplay = $form.find(".result-display");
			$resultDisplay.empty();
			$section.find("table.tiles td").removeClass("bg-highlight");


			let planet = $section.attr("index") === "query" ? document.queriedPlanet : document.planetsData[parseInt($section.attr("index"))];
			let options = {
				adjacencyBonus: parseInt($form.find(".adjacency-bonus-input").val()),
				notOnSpecial: $form.find(".not-on-special-input")[0].checked,
				@if (Model.IsMachineEmpire)
				{
					@:allowNeuroElectricAmplifier: $form.find(".allowNeuroElectricAmplifierInput")[0].checked
				}
			};

			localStorage.setItem("planet-capital-options", JSON.stringify(options));

			if (options.adjacencyBonus === 1)
				options.allowNeuroElectricAmplifier = false;

			let result = findBestTileForColonyCapital(planet.Tiles, options);
			let maxBonus = result[0].totalBonus;
			//并列第一的都列出来
			for (let i = 0; i < result.length && (i < 3 || result[i].totalBonus === maxBonus); i++)
			{
				let description = result[i].config.slice(1).reduce((s, element) =>
				{
					return s + (element.toString() ? "；" + element.toString() : "");
				}, "");
				let html = `<p>都城建在<span class="tileId ${result[i].totalBonus === maxBonus ? "bg-highlight" : ""}">${result[i].config[0].tileId}</span>，加成为${result[i].totalBonus}${result[i].config[0].description ? result[i].config[0].description : ""}${description}</p>`;
				$resultDisplay.append(html);
				if (result[i].totalBonus === maxBonus)
					findTileTd.call($section, result[i].config[0].tileId).addClass("bg-highlight");
			}

			$form.find(".tileId").hover(function()
			{
				let $this = $(this);
				findTileTd.call($this, parseInt($this.text())).addClass("bg-active");
			}, function()
			{
				let $this = $(this);
				findTileTd.call($this, parseInt($this.text())).removeClass("bg-active");
			});
		};

		function buildTilesTable($planetTable, tiles)
		{
			let id = 0;
			//let planetSize = Object.keys(tiles).length;
			//outside:

			for (let row = 0; row < 5; row++)
			{
				let $tr = $("<tr>");
				for (let column = 0; column < 5; column++)
				{
					let $td = $("<td>");
					if (tiles[id])
					{
						let technologies = 0;
						let special = 0;
						for (let [resourceName, amount] of Object.entries(tiles[id].Resources))
						{
							switch (resourceName)
							{
							case "minerals":
								$td.append(`<span class="resource"><img src="https://stellaris.paradoxwikis.com/images/1/10/Minerals.png" title="@YLo["minerals"]">${amount}</span>`);
								break;
							case "energy":
								$td.append(`<span class="resource"><img src="https://stellaris.paradoxwikis.com/images/5/58/Energy_Credits.png" title="@YLo["energy"]">${amount}</span>`);
								break;
							case "food":
								$td.append(`<span class="resource"><img src="https://stellaris.paradoxwikis.com/images/c/c6/Food.png" title="@YLo["food"]">${amount}</span>`);
								break;
							case "research":
								technologies += amount;
								break;
							default:
								special += amount;
							}
						}
						if (technologies > 0)
							$td.append(`<span class="resource"><img src="https://stellaris.paradoxwikis.com/images/2/20/Research.png" width=22 title="@YLo["RESEARCH"]">${technologies}</span>`);
						if (special > 0)
							$td.append(`<span class="resource"><img src="https://stellaris.paradoxwikis.com/images/8/83/Strategic.png" title="@Lo["Special Resources, eg. alien pets, betharian"]">${special}</span>`);
					} else
						$td.addClass("nonexistent");
					$tr.append($td);
					id++;
				}
				$planetTable.append($tr);
				//if (id > planetSize)
				//	break outside;
			}
		};

		function findBestTileForColonyCapital(tiles, options)
		{
			options.ignoreFood = @Model.IsMachineEmpire.ToString().ToLower();
			let id = -1;
			let nodes = [];
			for (let row = 0; row < 5; row++)
			{
				for (let column = 0; column < 5; column++)
				{
					id++;
					if (tiles[id])
					{
						if (options.notOnSpecial && tiles[id].Resources.special)
							continue;

						let node = new SearchNode(id);
						node.children = generateBonusTree(24, tiles, id, options, options.allowNeuroElectricAmplifier);
						nodes.push(node);
					}
				}
			}
			let list = flatPaths(nodes);
			list = list.map(row =>
			{
				mergeCapitalNodes(row);
				return {
					totalBonus: row.reduce((v, a) => v + a.bonus, 0),
					config: row
				};
			});

			list.sort((a, b) => b.totalBonus - a.totalBonus);
			return list;
		}

		function generateBonusTree(id, tiles, capitalTileId, options, allowNeuroElectricAmplifier)
		{
			if (id < 0)
				return [];

			if (!tiles[id])
				return generateBonusTree(id - 1, tiles, capitalTileId, options, allowNeuroElectricAmplifier);

			if (id === capitalTileId)
			{
				let res = Object.assign({}, tiles[id].Resources);
				if (options.notOnSpecial && res.special)
					return generateBonusTree(id - 1, tiles, capitalTileId, options, allowNeuroElectricAmplifier);

				delete res.energy;
				if (options.ignoreFood)
					delete res.food;


				let node = new SearchNode(id);
				//除电以外的资源都被压了，减成
				Object.keys(res).forEach(k => node.bonus -= res[k]);
				if (res.minerals)
					node.description = (node.description || "") + `压${res.minerals}矿`;
				if (res.research)
					node.description = (node.description || "") + `压${res.research}科研`;
				if (res.food)
					node.description = (node.description || "") + `压${res.food}食物`;


				node.children = generateBonusTree(id - 1, tiles, capitalTileId, options, allowNeuroElectricAmplifier);

				return [node];
			} else if (isTileAdjacent(id, capitalTileId))
			{
				let res = Object.assign({}, tiles[id].Resources);
				let nodes = [];
				if ((res.energy > 0 || res.minerals > 0) && allowNeuroElectricAmplifier)
				{
					let neaNode = new SearchNode(id);
					neaNode.bonus = options.adjacencyBonus * 2;
					neaNode.description = "造神经电放大器";
					//只有机械帝国才能造神经电放大器，而机械帝国不需要食物，所以不用对食物减成。

					//神经电放大器是星球唯一的。
					let bestTileIdForNea = findBestCandidateForNeuroElectricAmplifier(tiles);
					if (bestTileIdForNea != id && bestTileIdForNea>=0)
					{
						let lost = Math.min(tiles[bestTileIdForNea].Resources.energy, tiles[bestTileIdForNea].Resources.minerals);
						if (lost > 0)
						{
							neaNode.description = joinString(neaNode.description, `并导致<span class="tileId">${bestTileIdForNea}</span>不能造`);
							neaNode.bonus -= lost;
						}
					}
					if (res.resource)
						neaNode.description = joinStringWithSeparator(neaNode.description, "，", `压${res.resource}科研`);

					neaNode.children = generateBonusTree(id - 1, tiles, capitalTileId, options, false);
					nodes.push(neaNode);
				}

				let node = new SearchNode(id);
				node.bonus = options.adjacencyBonus;
				if (!res.energy && !res.minerals && (!res.food || options.ignoreFood) && !res.research && !res.special)
					node.description = "造基本建筑";
				else
					node.description = (res.research > 0 ? `基本建筑压${res.research}科研` : "") + (res.special ? "基本建筑压特殊资源" : "");

				node.children = generateBonusTree(id - 1, tiles, capitalTileId, options, allowNeuroElectricAmplifier);
				nodes.push(node);
				return nodes;
			} else
				return generateBonusTree(id - 1, tiles, capitalTileId, options, allowNeuroElectricAmplifier);
		}


		function findBestCandidateForNeuroElectricAmplifier(tiles)
		{
			let best = Number.MIN_SAFE_INTEGER;
			let bestId = -1;
			for (const [id, tile] of Object.entries(tiles))
			{
				if (tile.Resources.energy > 0 && tile.Resources.minerals > 0)
				{
					let total = tile.Resources.energy+ tile.Resources.minerals;
					if (total > best)
					{
						best = total;
						bestId = id;
					}
				}
			}
			return bestId;
		}
		
	</script>
	<script>
		$("#queryPlanetButton").click(function()
		{
			let thisButton = this;
			thisButton.disabled = true;

			$("#queryPlanetDynamicSection").detach();

			fetch(`/api/${document.saveGamePath}/Planets/${$("#planetIdInput").val()}`).then(response => response.json()).then(planetTiles =>
			{
				document.queriedPlanet = planetTiles;

				let $section = $("#planetSectionTemplate").clone();
				$section.attr("id", "queryPlanetDynamicSection");
				buildPlanetSection($section, planetTiles, "query");
				$("#queryPlanet").append($section);
				thisButton.disabled = false;
			}).catch(function(reason)
			{
				thisButton.disabled = false;
				alert(reason);
			});
		});
	</script>
}